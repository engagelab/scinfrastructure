# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     				/										controllers.Application.index




#------------------------------ Group data set Services ---------------------------------------#



# Group Services
GET     				/group									controllers.SGroups.fetchAllGroups
POST     				/group									controllers.SGroups.createGroup
GET     				/group/:groupId							controllers.SGroups.fetchGroupById(groupId:String)
GET     				/group/run/:runId						controllers.SGroups.fetchGroupsByRunId(runId:String)






# Member Services
GET     				/member/group/:groupId					controllers.SGroups.fetchGroupMembers(groupId:String)
POST     				/member									controllers.SGroups.addMember






# Postit Services
GET     				/postit/:postitId						controllers.SPostits.fetchPostitById(postitId:String)
GET						/group/postit/							controllers.SPostits.fetchPostitsByGroupId(groupId:String)


GET						/task/postit/							controllers.SPostits.fetchPostitsByTPRG(taskId:String, runId:String, groupId:String)
POST     				/task/postit/							controllers.SPostits.addPostit
PUT     				/task/postit/:postitId					controllers.SPostits.updatePostitInFlash(postitId:String)
DELETE					/task/postit/:postitId					controllers.SPostits.deletePostitById(postitId:String)


PUT     				/group/postit/:postitId					controllers.SPostits.updatePostitOnWeb(postitId:String)


GET						/comment/postit/						controllers.SPostits.fetchCommentOnPostit(postitId:String)
POST					/comment/postit/						controllers.SPostits.postCommentOnPostit






# Video Services
GET     				/video/:videoId							controllers.SVideos.fetchVideoById(videoId:String)
GET						/group/video/							controllers.SVideos.fetchVideosByGroupId(groupId:String)

POST     				/group/video/							controllers.SVideos.addVideo
DELETE     				/video/:videoId							controllers.SVideos.deleteVideoById(videoId:String)


PUT     				/group/video/:videoId					controllers.SVideos.updateVideoOnWeb(videoId:String)


POST					/comment/video/							controllers.SVideos.postCommentOnVideo
GET						/comment/video/							controllers.SVideos.fetchCommentsByVideo(videoId:String)






# Image Services

GET						/group/image/							controllers.SImages.fetchImagesByGroupId(groupId:String)

POST     				/image/:groupId/:taskId/:runId			controllers.SImages.addImage(groupId:String, taskId:String, runId:String)
DELETE     				/image/:imageId							controllers.SImages.deleteImageById(imageId:String)


GET						/image/:imageId							controllers.SImages.showImage(imageId:String)
PUT     				/group/image/:imageId					controllers.SImages.updateImageOnWeb(imageId:String)

GET						/comment/image/							controllers.SImages.fetchCommentsByImage(imageId:String)
POST					/comment/image/							controllers.SImages.postCommentOnImage








#------------------------------ Project data set Services ---------------------------------------#




# Group Services
GET     				/project								controllers.SProjects.fetchAllProjects
POST					/project								controllers.SProjects.addProject
GET     				/project/title/:title					controllers.SProjects.fetchProjectByTitle(title:String)





# Act Services
POST					/act/project/:projectId						controllers.SProjects.addAct(projectId:String)


# Scene Services
POST					/scene/project/:projectId					controllers.SProjects.addScene(projectId:String)


# Task Services
POST					/task/project/:projectId					controllers.SProjects.addTask(projectId:String)
GET						/task/project/:projectId					controllers.SProjects.fetchTasksByProject(projectId:String)

GET						/task/:taskId								controllers.SProjects.getNameOfTask(taskId:String)









#------------------------------ Rollcall Services ---------------------------------------#

GET						/rollcall/runId/					controllers.RollCalls.GetCurrentRunId







#------------------------------ Document upload services ---------------------------------------#
GET							/doc										controllers.SDocuments.fetchAllDocuments

GET							/doc/:docId									controllers.SDocuments.fetchDocumentById(docId:String)

GET							/doc/task/:taskId							controllers.SDocuments.fetchDocumentsByTaskId(taskId:String)

POST						/doc/:taskId/:taskName/:runId				controllers.SDocuments.uploadDocument(taskId:String, taskName:String, runId:String)

DELETE						/doc/:docId									controllers.SDocuments.deleteDocumentById(docId:String)


GET							/getDoc/:docId								controllers.SDocuments.getDocument(docId:String)


GET							/doc/list/									controllers.SDocuments.list
GET							/doc/show/									controllers.SDocuments.show(id:String)

GET							/doc/add/									controllers.SDocuments.showBlank
POST						/doc/save/									controllers.SDocuments.save
















# Utilities for debugging server issues
GET     /health                             controllers.Server.health()
GET     /threaddump                         controllers.Server.threaddump()
GET     /servermetrics                      controllers.Server.metrics(classPrefix ?= "", pretty:Boolean ?= true)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                       controllers.Assets.at(path="/public", file)
